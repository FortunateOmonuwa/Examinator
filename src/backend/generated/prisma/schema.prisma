generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student {
  id           String        @id @default(uuid()) @db.Uuid
  name         String
  responses    Response[]    @relation("Student-Responses")
  profile      UserProfile   @relation(fields: [profileId], references: [id])
  profileId    String        @unique @db.Uuid
  studentExams StudentExam[]
}

model Examiner {
  id        String      @id @default(uuid()) @db.Uuid
  name      String
  exams     Exam[]      @relation("Exams")
  profile   UserProfile @relation(fields: [profileId], references: [id])
  profileId String      @unique @db.Uuid
}

model UserProfile {
  id           String    @id @default(uuid()) @db.Uuid
  email        String    @unique
  passwordHash String
  role         Role
  examiner     Examiner?
  student      Student?
  dateCreated  DateTime  @default(now())
  dateUpdated  DateTime  @default(now())
}

model Exam {
  id               String        @id @default(uuid()) @db.Uuid
  title            String
  description      String
  link             String
  creatorId        String        @db.Uuid
  creator          Examiner      @relation("Exams", fields: [creatorId], references: [id])
  questions        Question[]    @relation("Questions")
  enforceTimeLimit Boolean       @default(false)
  stipulatedTime   Int
  dateCreated      DateTime      @default(now())
  dateUpdated      DateTime      @default(now())
  studentExams     StudentExam[]
}

model StudentExam {
  id          String     @id @default(uuid()) @db.Uuid
  student     Student    @relation(fields: [studentId], references: [id])
  studentId   String     @db.Uuid
  exam        Exam       @relation(fields: [examId], references: [id])
  examId      String     @db.Uuid
  status      ExamStatus @default(NOT_STARTED)
  startedAt   DateTime?
  completedAt DateTime?
  timeSpent   Int
  score       Float?

  @@unique([studentId, examId])
}

model Question {
  id       String     @id @default(uuid()) @db.Uuid
  text     String
  examId   String     @db.Uuid
  exam     Exam       @relation("Questions", fields: [examId], references: [id])
  options  Option[]   @relation("Options")
  Response Response[] @relation("Question-Responses")
  required Boolean
}

model Option {
  id         String     @id @default(uuid()) @db.Uuid
  text       String
  questionId String     @db.Uuid
  question   Question   @relation("Options", fields: [questionId], references: [id])
  isCorrect  Boolean
  Response   Response[] @relation("Responses")
}

model Response {
  id          String   @id @default(uuid()) @db.Uuid
  studentId   String   @db.Uuid
  student     Student  @relation("Student-Responses", fields: [studentId], references: [id])
  questionId  String   @db.Uuid
  question    Question @relation("Question-Responses", fields: [questionId], references: [id])
  options     Option[] @relation("Responses")
  textAnswer  String?
  submittedAt DateTime @default(now())
}

enum Role {
  ADMIN
  STUDENT
  EXAMINER
}

enum ExamStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}
