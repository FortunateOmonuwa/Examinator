// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student {
  id        Int         @id @default(autoincrement())
  name      String
  responses Response[]  @relation("Student-Responses")
  profile   UserProfile @relation(fields: [profileId], references: [id])
  profileId Int         @unique
}

model Examiner {
  id        Int         @id @default(autoincrement())
  name      String
  exams     Exam[]      @relation("Exams")
  profile   UserProfile @relation(fields: [profileId], references: [id])
  profileId Int         @unique
}

model UserProfile {
  id           Int       @id @default(autoincrement())
  email        String    @unique
  passwordHash String
  role         Role
  examiner     Examiner?
  student      Student?
  dateCreated  DateTime  @default(now())
  dateUpdated  DateTime  @default(now())
}

model Exam {
  id          Int        @id @default(autoincrement())
  title       String
  description String
  link        String
  creatorId   Int
  creator     Examiner   @relation("Exams", fields: [creatorId], references: [id])
  questions   Question[] @relation("Questions")
  isAvailable Boolean
  dateCreated DateTime   @default(now())
  dateUpdated DateTime   @default(now())
}

model Question {
  id       Int        @id @default(autoincrement())
  text     String
  examId   Int
  exam     Exam       @relation("Questions", fields: [examId], references: [id])
  options  Option[]   @relation("Options")
  Response Response[] @relation("Question-Responses")
}

model Option {
  id         Int        @id @default(autoincrement())
  text       String
  questionId Int
  question   Question   @relation("Options", fields: [questionId], references: [id])
  isCorrect  Boolean
  Response   Response[] @relation("Responses")
}

model Response {
  id          Int      @id @default(autoincrement())
  studentId   Int
  student     Student  @relation("Student-Responses", fields: [studentId], references: [id])
  question    Question @relation("Question-Responses", fields: [questionId], references: [id])
  questionId  Int
  options     Option[] @relation("Responses")
  textAnswer  String?
  submittedAt DateTime @default(now())
}

enum Role {
  ADMIN
  STUDENT
  EXAMINER
}
